name: Build Program

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    # ---- Cache Qt ----
    - name: Cache Qt
      uses: actions/cache@v3
      with:
        path: ~/.cache/Qt
        key: qt-${{ runner.os }}-v4.3.0
        restore-keys: qt-${{ runner.os }}-

    - uses: jurplel/install-qt-action@v4.3.0

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # ---- Linux: Install ImageMagick ----
    - name: Install ImageMagick
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y imagemagick

    # ---- Linux: Package AppImage + strip + zip ----
    - name: Package AppImage
      if: matrix.os == 'ubuntu-latest'
      run: |
        APPDIR=AppDir
        mkdir -p $APPDIR/usr/bin
        cp ${{ steps.strings.outputs.build-output-dir }}/lbox-lua-runner $APPDIR/usr/bin/
        strip $APPDIR/usr/bin/lbox-lua-runner

        mkdir -p $APPDIR/usr/share/applications
        cat > $APPDIR/usr/share/applications/lbox-lua-runner.desktop <<EOF
        [Desktop Entry]
        Name=LuaRunner
        Exec=lbox-lua-runner
        Icon=lbox-lua-runner
        Type=Application
        Categories=Utility;
        EOF

        # placeholder 256x256 transparent PNG icon
        mkdir -p $APPDIR/usr/share/icons/hicolor/256x256/apps
        convert -size 256x256 canvas:transparent $APPDIR/usr/share/icons/hicolor/256x256/apps/lbox-lua-runner.png

        # download linuxdeploy + Qt plugin
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage

        # strip all ELF binaries inside AppDir to reduce AppImage size
        find $APPDIR -type f -exec file {} \; | grep "ELF .* executable" | cut -d: -f1 | xargs -r strip --strip-unneeded || true

        # create AppImage
        ./linuxdeploy-x86_64.AppImage --appdir $APPDIR \
          --plugin qt \
          --output appimage

        # zip AppImage + helper Lua script (files only, no cp)
        ZIP_PATH="${{ github.workspace }}/LuaRunner-linux.zip"
        zip -j "$ZIP_PATH" AppImage-lbox-lua-runner* "${{ github.workspace }}/runner-helper.lua"
        echo "Created $ZIP_PATH"

    # ---- Windows: Deploy Qt + zip ----
    - name: Deploy Qt (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $exePath = "${{ steps.strings.outputs.build-output-dir }}\Release\lbox-lua-runner.exe"
        $qtBin = (Get-Command qmake).Source | Split-Path
        & "$qtBin\windeployqt.exe" --release $exePath

        # copy Lua helper
        Copy-Item "${{ github.workspace }}\runner-helper.lua" (Split-Path $exePath)

        # zip files directly
        $zipPath = "${{ github.workspace }}\LuaRunner-windows.zip"
        $files = Get-ChildItem -Path (Split-Path $exePath) -File
        Compress-Archive -Path $files.FullName -DestinationPath $zipPath -Force
        Write-Output "Created $zipPath"

    # ---- Upload artifacts ----
    - uses: actions/upload-artifact@v4
      with:
        name: LuaRunner-${{ matrix.os }}
        path: |
          ${{ github.workspace }}/LuaRunner-linux.zip
          ${{ github.workspace }}/LuaRunner-windows.zip
